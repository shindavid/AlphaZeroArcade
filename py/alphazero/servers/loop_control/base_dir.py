"""
Specifies the base directory structure.

/workspace/mount
├── aws/ (contains AWS credentials for uploading authentication)
├── benchmarks/ (refer to py/alphazero/logic/benchmark_record.py for details)
│   ├── {game}/
│   │   ├── {tag}/
│   │   └── ...
│   └── ...
├── output/ (refer to py/alphazero/servers/loop_control/directory_organizer.py for details)
│   ├── {game}/
│   │   ├── {tag}/
│   │   └── ...
│   └── ...
└── tars/ (generated by upload_benchmark_to_s3.py)
    ├── {game}/
    │   ├── {tag}/
    │   │   ├── {utc_key}.tar
    │   │   └── ...
    │   └── ...
    └── ...
"""
from alphazero.logic.custom_types import Version

import glob
import logging
import os
from typing import Optional

"""
Any time we make any changes that cause existing mount/output/ or mount/benchmarks/ directories to
be incompatible with the current code, we should increment VERSION.
"""
VERSION = Version(num=6)
logger = logging.getLogger(__name__)


class BaseDir:
    base_dir = ''

    @classmethod
    def output_dir(cls):
        return os.path.join(cls.base_dir, 'output')


class Scratch(BaseDir):
    base_dir = '/home/devuser/scratch'


class Mount(BaseDir):
    base_dir = f'/workspace/mount/{VERSION}'


class Workspace(Mount):
    benchmark_dir = os.path.join(Mount.base_dir, 'benchmarks')
    ref_dir = '/workspace/repo/reference.players'
    aws_dir = '/workspace/mount/aws'
    tars_dir = os.path.join(Mount.base_dir, 'tars')

    @staticmethod
    def benchmark_record_file(game: str) -> str:
        return os.path.join('/workspace/repo/benchmark_records', f'{game}.json')

    @staticmethod
    def ref_rundir(game: str) -> str:
        return os.path.join(Workspace.output_dir(), game, 'reference.player')


class Benchmark(Mount):
    @classmethod
    def output_dir(cls):
        return os.path.join(cls.base_dir, 'benchmarks')

    @classmethod
    def tar_path(cls, game: str, tag: str, utc_key: str = None) -> Optional[str]:
        if utc_key is None:
            tag_dir = os.path.join(Workspace.tars_dir, game, tag)
            if not os.path.isdir(tag_dir):
                return None

            tar_files = glob.glob(os.path.join(tag_dir, '*.tar'))
            if tar_files:
                utc_key = max(tar_files)
            else:
                return None
        else:
            utc_key = utc_key + '.tar'
        return os.path.join(Workspace.tars_dir, game, tag, utc_key)

    @classmethod
    def game_dir(cls, game: str):
        return os.path.join(cls.output_dir(), game)

    @classmethod
    def path(cls, game: str, tag: str):
        return os.path.join(Benchmark.game_dir(game), tag)
