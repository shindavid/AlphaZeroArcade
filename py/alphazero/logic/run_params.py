from games.game_spec import GameSpec
import games.index as game_index
from util.py_util import is_valid_path_component

import argparse
from dataclasses import dataclass
import sys
from typing import Optional, List


@dataclass
class RunParams:
    """
    Parameters used to specify a particular AlphaZero run. All files generated by the run are
    written to:

        /workspace/output/{game}/{tag}/

    according to the directory structure described in DirectoryOrganizer.
    """
    game: str
    tag: str

    @staticmethod
    def create(args, require_tag=True) -> 'RunParams':
        params = RunParams(
            game=args.game,
            tag=args.tag,
        )
        params.validate(require_tag)
        return params

    def validate(self, require_tag):
        assert self.game, 'Required option: --game/-g'
        if require_tag:
            assert self.tag, 'Required option: --tag/-t'

        assert game_index.is_valid_game_name(self.game), f'Invalid game name: {self.game}'
        if self.tag:
            assert RunParams.is_valid_tag(self.tag), f'Invalid tag: {self.tag}'

    @staticmethod
    def is_valid_tag(tag: str) -> bool:
        if not tag:
            return False
        if '@' in tag or '.' in tag:
            return False
        return is_valid_path_component(tag)

    @staticmethod
    def add_args(parser: argparse.ArgumentParser, multiple_tags=False) -> Optional[GameSpec]:
        """
        Returns the game specified in the command line arguments, so that other command-line
        options can use game-specific defaults.
        """
        group = parser.add_argument_group('Common options')

        game_index.add_parser_argument(group, '-g', '--game')
        if multiple_tags:
            group.add_argument('-t', '--tag', default='', help='comma-separated tags for this run (e.g. "v1,v2")')
        else:
            group.add_argument('-t', '--tag', default='', help='tag for this run (e.g. "v1")')

        # attempt an early parse to see if -g/--game is specified:
        sys_args = [a for a in sys.argv[1:] if a not in ('-h', '--help')]
        args, _ = parser.parse_known_args(sys_args)
        if args.game:
            return game_index.get_game_spec(args.game)
        return None

    def add_to_cmd(self, cmd: List[str]):
        cmd.extend([
            '--game', self.game,
            '--tag', self.tag,
        ])
